//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: app-client.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `DistributedMatchEngine_MatchEngineApiClient`, then call methods of this protocol to make API calls.
internal protocol DistributedMatchEngine_MatchEngineApiClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: DistributedMatchEngine_MatchEngineApiClientInterceptorFactoryProtocol? { get }

  func registerClient(
    _ request: DistributedMatchEngine_RegisterClientRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DistributedMatchEngine_RegisterClientRequest, DistributedMatchEngine_RegisterClientReply>

  func findCloudlet(
    _ request: DistributedMatchEngine_FindCloudletRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DistributedMatchEngine_FindCloudletRequest, DistributedMatchEngine_FindCloudletReply>

  func platformFindCloudlet(
    _ request: DistributedMatchEngine_PlatformFindCloudletRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DistributedMatchEngine_PlatformFindCloudletRequest, DistributedMatchEngine_FindCloudletReply>

  func qosPrioritySessionCreate(
    _ request: DistributedMatchEngine_QosPrioritySessionCreateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DistributedMatchEngine_QosPrioritySessionCreateRequest, DistributedMatchEngine_QosPrioritySessionReply>

  func qosPrioritySessionDelete(
    _ request: DistributedMatchEngine_QosPrioritySessionDeleteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DistributedMatchEngine_QosPrioritySessionDeleteRequest, DistributedMatchEngine_QosPrioritySessionDeleteReply>

  func verifyLocation(
    _ request: DistributedMatchEngine_VerifyLocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DistributedMatchEngine_VerifyLocationRequest, DistributedMatchEngine_VerifyLocationReply>

  func getLocation(
    _ request: DistributedMatchEngine_GetLocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DistributedMatchEngine_GetLocationRequest, DistributedMatchEngine_GetLocationReply>

  func addUserToGroup(
    _ request: DistributedMatchEngine_DynamicLocGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DistributedMatchEngine_DynamicLocGroupRequest, DistributedMatchEngine_DynamicLocGroupReply>

  func getAppInstList(
    _ request: DistributedMatchEngine_AppInstListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DistributedMatchEngine_AppInstListRequest, DistributedMatchEngine_AppInstListReply>

  func getFqdnList(
    _ request: DistributedMatchEngine_FqdnListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DistributedMatchEngine_FqdnListRequest, DistributedMatchEngine_FqdnListReply>

  func getAppOfficialFqdn(
    _ request: DistributedMatchEngine_AppOfficialFqdnRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DistributedMatchEngine_AppOfficialFqdnRequest, DistributedMatchEngine_AppOfficialFqdnReply>

  func getQosPositionKpi(
    _ request: DistributedMatchEngine_QosPositionRequest,
    callOptions: CallOptions?,
    handler: @escaping (DistributedMatchEngine_QosPositionKpiReply) -> Void
  ) -> ServerStreamingCall<DistributedMatchEngine_QosPositionRequest, DistributedMatchEngine_QosPositionKpiReply>

  func streamEdgeEvent(
    callOptions: CallOptions?,
    handler: @escaping (DistributedMatchEngine_ServerEdgeEvent) -> Void
  ) -> BidirectionalStreamingCall<DistributedMatchEngine_ClientEdgeEvent, DistributedMatchEngine_ServerEdgeEvent>
}

extension DistributedMatchEngine_MatchEngineApiClientProtocol {
  internal var serviceName: String {
    return "distributed_match_engine.MatchEngineApi"
  }

  ///
  /// RegisterClient
  ///
  /// Registers the client with the closest Distributed Matching Engine (the
  /// nearest edge location in the Operator network) and validates the
  /// legitimacy of the mobile subscriber. All session information is encrypted.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterClient.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerClient(
    _ request: DistributedMatchEngine_RegisterClientRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DistributedMatchEngine_RegisterClientRequest, DistributedMatchEngine_RegisterClientReply> {
    return self.makeUnaryCall(
      path: "/distributed_match_engine.MatchEngineApi/RegisterClient",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterClientInterceptors() ?? []
    )
  }

  ///
  /// FindCloudlet
  ///
  /// Locates the most optimal edge computing footprint and allows the
  /// registered application to find the application backend by leveraging the
  /// location, application subscription, and service provider agreement. If
  /// there are no suitable cloudlet instances available, the client may connect
  /// to the application server located in the public cloud.
  ///
  /// - Parameters:
  ///   - request: Request to send to FindCloudlet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func findCloudlet(
    _ request: DistributedMatchEngine_FindCloudletRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DistributedMatchEngine_FindCloudletRequest, DistributedMatchEngine_FindCloudletReply> {
    return self.makeUnaryCall(
      path: "/distributed_match_engine.MatchEngineApi/FindCloudlet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindCloudletInterceptors() ?? []
    )
  }

  ///
  /// PlatformFindCloudlet
  ///
  /// Similar to FindCloudlet, except uses a token for client data.
  /// This API is only applicable for Platform Applications.
  ///
  /// - Parameters:
  ///   - request: Request to send to PlatformFindCloudlet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func platformFindCloudlet(
    _ request: DistributedMatchEngine_PlatformFindCloudletRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DistributedMatchEngine_PlatformFindCloudletRequest, DistributedMatchEngine_FindCloudletReply> {
    return self.makeUnaryCall(
      path: "/distributed_match_engine.MatchEngineApi/PlatformFindCloudlet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlatformFindCloudletInterceptors() ?? []
    )
  }

  ///
  /// QosPrioritySessionCreate
  ///
  /// Creates a QOS priority session (latency or throughput priority) from the client
  /// to the app inst by making a call to the operator's priority session API server.
  ///
  /// - Parameters:
  ///   - request: Request to send to QosPrioritySessionCreate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func qosPrioritySessionCreate(
    _ request: DistributedMatchEngine_QosPrioritySessionCreateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DistributedMatchEngine_QosPrioritySessionCreateRequest, DistributedMatchEngine_QosPrioritySessionReply> {
    return self.makeUnaryCall(
      path: "/distributed_match_engine.MatchEngineApi/QosPrioritySessionCreate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQosPrioritySessionCreateInterceptors() ?? []
    )
  }

  ///
  /// QosPrioritySessionDelete
  ///
  /// Deletes a previously created QOS priority session by making a call to the operator's 
  /// priority session API server.
  ///
  /// - Parameters:
  ///   - request: Request to send to QosPrioritySessionDelete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func qosPrioritySessionDelete(
    _ request: DistributedMatchEngine_QosPrioritySessionDeleteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DistributedMatchEngine_QosPrioritySessionDeleteRequest, DistributedMatchEngine_QosPrioritySessionDeleteReply> {
    return self.makeUnaryCall(
      path: "/distributed_match_engine.MatchEngineApi/QosPrioritySessionDelete",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQosPrioritySessionDeleteInterceptors() ?? []
    )
  }

  ///
  /// VerifyLocation
  ///
  /// Verifies that the GPS coordinates accurately report the actual location of the device.
  ///
  /// - Parameters:
  ///   - request: Request to send to VerifyLocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func verifyLocation(
    _ request: DistributedMatchEngine_VerifyLocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DistributedMatchEngine_VerifyLocationRequest, DistributedMatchEngine_VerifyLocationReply> {
    return self.makeUnaryCall(
      path: "/distributed_match_engine.MatchEngineApi/VerifyLocation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyLocationInterceptors() ?? []
    )
  }

  /// Unary call to GetLocation
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLocation(
    _ request: DistributedMatchEngine_GetLocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DistributedMatchEngine_GetLocationRequest, DistributedMatchEngine_GetLocationReply> {
    return self.makeUnaryCall(
      path: "/distributed_match_engine.MatchEngineApi/GetLocation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLocationInterceptors() ?? []
    )
  }

  /// Unary call to AddUserToGroup
  ///
  /// - Parameters:
  ///   - request: Request to send to AddUserToGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addUserToGroup(
    _ request: DistributedMatchEngine_DynamicLocGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DistributedMatchEngine_DynamicLocGroupRequest, DistributedMatchEngine_DynamicLocGroupReply> {
    return self.makeUnaryCall(
      path: "/distributed_match_engine.MatchEngineApi/AddUserToGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddUserToGroupInterceptors() ?? []
    )
  }

  /// Unary call to GetAppInstList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAppInstList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAppInstList(
    _ request: DistributedMatchEngine_AppInstListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DistributedMatchEngine_AppInstListRequest, DistributedMatchEngine_AppInstListReply> {
    return self.makeUnaryCall(
      path: "/distributed_match_engine.MatchEngineApi/GetAppInstList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAppInstListInterceptors() ?? []
    )
  }

  /// Unary call to GetFqdnList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFqdnList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFqdnList(
    _ request: DistributedMatchEngine_FqdnListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DistributedMatchEngine_FqdnListRequest, DistributedMatchEngine_FqdnListReply> {
    return self.makeUnaryCall(
      path: "/distributed_match_engine.MatchEngineApi/GetFqdnList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFqdnListInterceptors() ?? []
    )
  }

  /// Unary call to GetAppOfficialFqdn
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAppOfficialFqdn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAppOfficialFqdn(
    _ request: DistributedMatchEngine_AppOfficialFqdnRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DistributedMatchEngine_AppOfficialFqdnRequest, DistributedMatchEngine_AppOfficialFqdnReply> {
    return self.makeUnaryCall(
      path: "/distributed_match_engine.MatchEngineApi/GetAppOfficialFqdn",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAppOfficialFqdnInterceptors() ?? []
    )
  }

  /// Server streaming call to GetQosPositionKpi
  ///
  /// - Parameters:
  ///   - request: Request to send to GetQosPositionKpi.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getQosPositionKpi(
    _ request: DistributedMatchEngine_QosPositionRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (DistributedMatchEngine_QosPositionKpiReply) -> Void
  ) -> ServerStreamingCall<DistributedMatchEngine_QosPositionRequest, DistributedMatchEngine_QosPositionKpiReply> {
    return self.makeServerStreamingCall(
      path: "/distributed_match_engine.MatchEngineApi/GetQosPositionKpi",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetQosPositionKpiInterceptors() ?? [],
      handler: handler
    )
  }

  /// Bidirectional streaming call to StreamEdgeEvent
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func streamEdgeEvent(
    callOptions: CallOptions? = nil,
    handler: @escaping (DistributedMatchEngine_ServerEdgeEvent) -> Void
  ) -> BidirectionalStreamingCall<DistributedMatchEngine_ClientEdgeEvent, DistributedMatchEngine_ServerEdgeEvent> {
    return self.makeBidirectionalStreamingCall(
      path: "/distributed_match_engine.MatchEngineApi/StreamEdgeEvent",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamEdgeEventInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol DistributedMatchEngine_MatchEngineApiClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'registerClient'.
  func makeRegisterClientInterceptors() -> [ClientInterceptor<DistributedMatchEngine_RegisterClientRequest, DistributedMatchEngine_RegisterClientReply>]

  /// - Returns: Interceptors to use when invoking 'findCloudlet'.
  func makeFindCloudletInterceptors() -> [ClientInterceptor<DistributedMatchEngine_FindCloudletRequest, DistributedMatchEngine_FindCloudletReply>]

  /// - Returns: Interceptors to use when invoking 'platformFindCloudlet'.
  func makePlatformFindCloudletInterceptors() -> [ClientInterceptor<DistributedMatchEngine_PlatformFindCloudletRequest, DistributedMatchEngine_FindCloudletReply>]

  /// - Returns: Interceptors to use when invoking 'qosPrioritySessionCreate'.
  func makeQosPrioritySessionCreateInterceptors() -> [ClientInterceptor<DistributedMatchEngine_QosPrioritySessionCreateRequest, DistributedMatchEngine_QosPrioritySessionReply>]

  /// - Returns: Interceptors to use when invoking 'qosPrioritySessionDelete'.
  func makeQosPrioritySessionDeleteInterceptors() -> [ClientInterceptor<DistributedMatchEngine_QosPrioritySessionDeleteRequest, DistributedMatchEngine_QosPrioritySessionDeleteReply>]

  /// - Returns: Interceptors to use when invoking 'verifyLocation'.
  func makeVerifyLocationInterceptors() -> [ClientInterceptor<DistributedMatchEngine_VerifyLocationRequest, DistributedMatchEngine_VerifyLocationReply>]

  /// - Returns: Interceptors to use when invoking 'getLocation'.
  func makeGetLocationInterceptors() -> [ClientInterceptor<DistributedMatchEngine_GetLocationRequest, DistributedMatchEngine_GetLocationReply>]

  /// - Returns: Interceptors to use when invoking 'addUserToGroup'.
  func makeAddUserToGroupInterceptors() -> [ClientInterceptor<DistributedMatchEngine_DynamicLocGroupRequest, DistributedMatchEngine_DynamicLocGroupReply>]

  /// - Returns: Interceptors to use when invoking 'getAppInstList'.
  func makeGetAppInstListInterceptors() -> [ClientInterceptor<DistributedMatchEngine_AppInstListRequest, DistributedMatchEngine_AppInstListReply>]

  /// - Returns: Interceptors to use when invoking 'getFqdnList'.
  func makeGetFqdnListInterceptors() -> [ClientInterceptor<DistributedMatchEngine_FqdnListRequest, DistributedMatchEngine_FqdnListReply>]

  /// - Returns: Interceptors to use when invoking 'getAppOfficialFqdn'.
  func makeGetAppOfficialFqdnInterceptors() -> [ClientInterceptor<DistributedMatchEngine_AppOfficialFqdnRequest, DistributedMatchEngine_AppOfficialFqdnReply>]

  /// - Returns: Interceptors to use when invoking 'getQosPositionKpi'.
  func makeGetQosPositionKpiInterceptors() -> [ClientInterceptor<DistributedMatchEngine_QosPositionRequest, DistributedMatchEngine_QosPositionKpiReply>]

  /// - Returns: Interceptors to use when invoking 'streamEdgeEvent'.
  func makeStreamEdgeEventInterceptors() -> [ClientInterceptor<DistributedMatchEngine_ClientEdgeEvent, DistributedMatchEngine_ServerEdgeEvent>]
}

internal final class DistributedMatchEngine_MatchEngineApiClient: DistributedMatchEngine_MatchEngineApiClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: DistributedMatchEngine_MatchEngineApiClientInterceptorFactoryProtocol?

  /// Creates a client for the distributed_match_engine.MatchEngineApi service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: DistributedMatchEngine_MatchEngineApiClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol DistributedMatchEngine_MatchEngineApiProvider: CallHandlerProvider {
  var interceptors: DistributedMatchEngine_MatchEngineApiServerInterceptorFactoryProtocol? { get }

  ///
  /// RegisterClient
  ///
  /// Registers the client with the closest Distributed Matching Engine (the
  /// nearest edge location in the Operator network) and validates the
  /// legitimacy of the mobile subscriber. All session information is encrypted.
  func registerClient(request: DistributedMatchEngine_RegisterClientRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DistributedMatchEngine_RegisterClientReply>

  ///
  /// FindCloudlet
  ///
  /// Locates the most optimal edge computing footprint and allows the
  /// registered application to find the application backend by leveraging the
  /// location, application subscription, and service provider agreement. If
  /// there are no suitable cloudlet instances available, the client may connect
  /// to the application server located in the public cloud.
  func findCloudlet(request: DistributedMatchEngine_FindCloudletRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DistributedMatchEngine_FindCloudletReply>

  ///
  /// PlatformFindCloudlet
  ///
  /// Similar to FindCloudlet, except uses a token for client data.
  /// This API is only applicable for Platform Applications.
  func platformFindCloudlet(request: DistributedMatchEngine_PlatformFindCloudletRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DistributedMatchEngine_FindCloudletReply>

  ///
  /// QosPrioritySessionCreate
  ///
  /// Creates a QOS priority session (latency or throughput priority) from the client
  /// to the app inst by making a call to the operator's priority session API server.
  func qosPrioritySessionCreate(request: DistributedMatchEngine_QosPrioritySessionCreateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DistributedMatchEngine_QosPrioritySessionReply>

  ///
  /// QosPrioritySessionDelete
  ///
  /// Deletes a previously created QOS priority session by making a call to the operator's 
  /// priority session API server.
  func qosPrioritySessionDelete(request: DistributedMatchEngine_QosPrioritySessionDeleteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DistributedMatchEngine_QosPrioritySessionDeleteReply>

  ///
  /// VerifyLocation
  ///
  /// Verifies that the GPS coordinates accurately report the actual location of the device.
  func verifyLocation(request: DistributedMatchEngine_VerifyLocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DistributedMatchEngine_VerifyLocationReply>

  func getLocation(request: DistributedMatchEngine_GetLocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DistributedMatchEngine_GetLocationReply>

  func addUserToGroup(request: DistributedMatchEngine_DynamicLocGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DistributedMatchEngine_DynamicLocGroupReply>

  func getAppInstList(request: DistributedMatchEngine_AppInstListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DistributedMatchEngine_AppInstListReply>

  func getFqdnList(request: DistributedMatchEngine_FqdnListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DistributedMatchEngine_FqdnListReply>

  func getAppOfficialFqdn(request: DistributedMatchEngine_AppOfficialFqdnRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DistributedMatchEngine_AppOfficialFqdnReply>

  func getQosPositionKpi(request: DistributedMatchEngine_QosPositionRequest, context: StreamingResponseCallContext<DistributedMatchEngine_QosPositionKpiReply>) -> EventLoopFuture<GRPCStatus>

  func streamEdgeEvent(context: StreamingResponseCallContext<DistributedMatchEngine_ServerEdgeEvent>) -> EventLoopFuture<(StreamEvent<DistributedMatchEngine_ClientEdgeEvent>) -> Void>
}

extension DistributedMatchEngine_MatchEngineApiProvider {
  internal var serviceName: Substring { return "distributed_match_engine.MatchEngineApi" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterClient":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DistributedMatchEngine_RegisterClientRequest>(),
        responseSerializer: ProtobufSerializer<DistributedMatchEngine_RegisterClientReply>(),
        interceptors: self.interceptors?.makeRegisterClientInterceptors() ?? [],
        userFunction: self.registerClient(request:context:)
      )

    case "FindCloudlet":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DistributedMatchEngine_FindCloudletRequest>(),
        responseSerializer: ProtobufSerializer<DistributedMatchEngine_FindCloudletReply>(),
        interceptors: self.interceptors?.makeFindCloudletInterceptors() ?? [],
        userFunction: self.findCloudlet(request:context:)
      )

    case "PlatformFindCloudlet":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DistributedMatchEngine_PlatformFindCloudletRequest>(),
        responseSerializer: ProtobufSerializer<DistributedMatchEngine_FindCloudletReply>(),
        interceptors: self.interceptors?.makePlatformFindCloudletInterceptors() ?? [],
        userFunction: self.platformFindCloudlet(request:context:)
      )

    case "QosPrioritySessionCreate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DistributedMatchEngine_QosPrioritySessionCreateRequest>(),
        responseSerializer: ProtobufSerializer<DistributedMatchEngine_QosPrioritySessionReply>(),
        interceptors: self.interceptors?.makeQosPrioritySessionCreateInterceptors() ?? [],
        userFunction: self.qosPrioritySessionCreate(request:context:)
      )

    case "QosPrioritySessionDelete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DistributedMatchEngine_QosPrioritySessionDeleteRequest>(),
        responseSerializer: ProtobufSerializer<DistributedMatchEngine_QosPrioritySessionDeleteReply>(),
        interceptors: self.interceptors?.makeQosPrioritySessionDeleteInterceptors() ?? [],
        userFunction: self.qosPrioritySessionDelete(request:context:)
      )

    case "VerifyLocation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DistributedMatchEngine_VerifyLocationRequest>(),
        responseSerializer: ProtobufSerializer<DistributedMatchEngine_VerifyLocationReply>(),
        interceptors: self.interceptors?.makeVerifyLocationInterceptors() ?? [],
        userFunction: self.verifyLocation(request:context:)
      )

    case "GetLocation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DistributedMatchEngine_GetLocationRequest>(),
        responseSerializer: ProtobufSerializer<DistributedMatchEngine_GetLocationReply>(),
        interceptors: self.interceptors?.makeGetLocationInterceptors() ?? [],
        userFunction: self.getLocation(request:context:)
      )

    case "AddUserToGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DistributedMatchEngine_DynamicLocGroupRequest>(),
        responseSerializer: ProtobufSerializer<DistributedMatchEngine_DynamicLocGroupReply>(),
        interceptors: self.interceptors?.makeAddUserToGroupInterceptors() ?? [],
        userFunction: self.addUserToGroup(request:context:)
      )

    case "GetAppInstList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DistributedMatchEngine_AppInstListRequest>(),
        responseSerializer: ProtobufSerializer<DistributedMatchEngine_AppInstListReply>(),
        interceptors: self.interceptors?.makeGetAppInstListInterceptors() ?? [],
        userFunction: self.getAppInstList(request:context:)
      )

    case "GetFqdnList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DistributedMatchEngine_FqdnListRequest>(),
        responseSerializer: ProtobufSerializer<DistributedMatchEngine_FqdnListReply>(),
        interceptors: self.interceptors?.makeGetFqdnListInterceptors() ?? [],
        userFunction: self.getFqdnList(request:context:)
      )

    case "GetAppOfficialFqdn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DistributedMatchEngine_AppOfficialFqdnRequest>(),
        responseSerializer: ProtobufSerializer<DistributedMatchEngine_AppOfficialFqdnReply>(),
        interceptors: self.interceptors?.makeGetAppOfficialFqdnInterceptors() ?? [],
        userFunction: self.getAppOfficialFqdn(request:context:)
      )

    case "GetQosPositionKpi":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DistributedMatchEngine_QosPositionRequest>(),
        responseSerializer: ProtobufSerializer<DistributedMatchEngine_QosPositionKpiReply>(),
        interceptors: self.interceptors?.makeGetQosPositionKpiInterceptors() ?? [],
        userFunction: self.getQosPositionKpi(request:context:)
      )

    case "StreamEdgeEvent":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DistributedMatchEngine_ClientEdgeEvent>(),
        responseSerializer: ProtobufSerializer<DistributedMatchEngine_ServerEdgeEvent>(),
        interceptors: self.interceptors?.makeStreamEdgeEventInterceptors() ?? [],
        observerFactory: self.streamEdgeEvent(context:)
      )

    default:
      return nil
    }
  }
}

internal protocol DistributedMatchEngine_MatchEngineApiServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerClient'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterClientInterceptors() -> [ServerInterceptor<DistributedMatchEngine_RegisterClientRequest, DistributedMatchEngine_RegisterClientReply>]

  /// - Returns: Interceptors to use when handling 'findCloudlet'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFindCloudletInterceptors() -> [ServerInterceptor<DistributedMatchEngine_FindCloudletRequest, DistributedMatchEngine_FindCloudletReply>]

  /// - Returns: Interceptors to use when handling 'platformFindCloudlet'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePlatformFindCloudletInterceptors() -> [ServerInterceptor<DistributedMatchEngine_PlatformFindCloudletRequest, DistributedMatchEngine_FindCloudletReply>]

  /// - Returns: Interceptors to use when handling 'qosPrioritySessionCreate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQosPrioritySessionCreateInterceptors() -> [ServerInterceptor<DistributedMatchEngine_QosPrioritySessionCreateRequest, DistributedMatchEngine_QosPrioritySessionReply>]

  /// - Returns: Interceptors to use when handling 'qosPrioritySessionDelete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQosPrioritySessionDeleteInterceptors() -> [ServerInterceptor<DistributedMatchEngine_QosPrioritySessionDeleteRequest, DistributedMatchEngine_QosPrioritySessionDeleteReply>]

  /// - Returns: Interceptors to use when handling 'verifyLocation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVerifyLocationInterceptors() -> [ServerInterceptor<DistributedMatchEngine_VerifyLocationRequest, DistributedMatchEngine_VerifyLocationReply>]

  /// - Returns: Interceptors to use when handling 'getLocation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLocationInterceptors() -> [ServerInterceptor<DistributedMatchEngine_GetLocationRequest, DistributedMatchEngine_GetLocationReply>]

  /// - Returns: Interceptors to use when handling 'addUserToGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddUserToGroupInterceptors() -> [ServerInterceptor<DistributedMatchEngine_DynamicLocGroupRequest, DistributedMatchEngine_DynamicLocGroupReply>]

  /// - Returns: Interceptors to use when handling 'getAppInstList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAppInstListInterceptors() -> [ServerInterceptor<DistributedMatchEngine_AppInstListRequest, DistributedMatchEngine_AppInstListReply>]

  /// - Returns: Interceptors to use when handling 'getFqdnList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFqdnListInterceptors() -> [ServerInterceptor<DistributedMatchEngine_FqdnListRequest, DistributedMatchEngine_FqdnListReply>]

  /// - Returns: Interceptors to use when handling 'getAppOfficialFqdn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAppOfficialFqdnInterceptors() -> [ServerInterceptor<DistributedMatchEngine_AppOfficialFqdnRequest, DistributedMatchEngine_AppOfficialFqdnReply>]

  /// - Returns: Interceptors to use when handling 'getQosPositionKpi'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetQosPositionKpiInterceptors() -> [ServerInterceptor<DistributedMatchEngine_QosPositionRequest, DistributedMatchEngine_QosPositionKpiReply>]

  /// - Returns: Interceptors to use when handling 'streamEdgeEvent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStreamEdgeEventInterceptors() -> [ServerInterceptor<DistributedMatchEngine_ClientEdgeEvent, DistributedMatchEngine_ServerEdgeEvent>]
}
