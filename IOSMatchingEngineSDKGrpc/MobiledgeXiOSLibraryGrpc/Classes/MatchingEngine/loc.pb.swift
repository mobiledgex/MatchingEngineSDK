// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: loc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Locations
// For IOS, see:
// https://developer.apple.com/documentation/corelocation/cllocation/1423718-init
// For Android, see:
// https://developer.android.com/reference/android/location/Location.html

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// This is a simple Timestamp message type
/// grpc-gateway converts google.protobuf.Timestamp into an RFC3339-type string
/// which is a waste of a conversion, so we define our own
public struct DistributedMatchEngine_Timestamp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var seconds: Int64 = 0

  public var nanos: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///
/// GPS Location
public struct DistributedMatchEngine_Loc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Latitude in WGS 84 coordinates
  public var latitude: Double = 0

  /// Longitude in WGS 84 coordinates
  public var longitude: Double = 0

  /// Horizontal accuracy (radius in meters)
  public var horizontalAccuracy: Double = 0

  /// Vertical accuracy (meters)
  public var verticalAccuracy: Double = 0

  /// On android only lat and long are guaranteed to be supplied
  /// Altitude in meters
  public var altitude: Double = 0

  /// Course (IOS) / bearing (Android) (degrees east relative to true north)
  public var course: Double = 0

  /// Speed (IOS) / velocity (Android) (meters/sec)
  public var speed: Double = 0

  /// Timestamp
  public var timestamp: DistributedMatchEngine_Timestamp {
    get {return _timestamp ?? DistributedMatchEngine_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timestamp: DistributedMatchEngine_Timestamp? = nil
}

///
/// Sample
public struct DistributedMatchEngine_Sample {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Latency value
  public var value: Double = 0

  /// Timestamp
  public var timestamp: DistributedMatchEngine_Timestamp {
    get {return _timestamp ?? DistributedMatchEngine_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  /// _(optional)_ Vendor specific data
  public var tags: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timestamp: DistributedMatchEngine_Timestamp? = nil
}

/// Statistics
public struct DistributedMatchEngine_Statistics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Average
  public var avg: Double = 0

  /// Minimum
  public var min: Double = 0

  /// Maximum
  public var max: Double = 0

  /// Square root of unbiased variance
  public var stdDev: Double = 0

  /// Unbiased variance
  public var variance: Double = 0

  /// Number of samples to create stats
  public var numSamples: UInt64 = 0

  /// Timestamp
  public var timestamp: DistributedMatchEngine_Timestamp {
    get {return _timestamp ?? DistributedMatchEngine_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timestamp: DistributedMatchEngine_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "distributed_match_engine"

extension DistributedMatchEngine_Timestamp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Timestamp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seconds"),
    2: .same(proto: "nanos"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.seconds) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.nanos) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.seconds != 0 {
      try visitor.visitSingularInt64Field(value: self.seconds, fieldNumber: 1)
    }
    if self.nanos != 0 {
      try visitor.visitSingularInt32Field(value: self.nanos, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DistributedMatchEngine_Timestamp, rhs: DistributedMatchEngine_Timestamp) -> Bool {
    if lhs.seconds != rhs.seconds {return false}
    if lhs.nanos != rhs.nanos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DistributedMatchEngine_Loc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Loc"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
    3: .standard(proto: "horizontal_accuracy"),
    4: .standard(proto: "vertical_accuracy"),
    5: .same(proto: "altitude"),
    6: .same(proto: "course"),
    7: .same(proto: "speed"),
    8: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.latitude) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.longitude) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.horizontalAccuracy) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.verticalAccuracy) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.altitude) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.course) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.speed) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 1)
    }
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 2)
    }
    if self.horizontalAccuracy != 0 {
      try visitor.visitSingularDoubleField(value: self.horizontalAccuracy, fieldNumber: 3)
    }
    if self.verticalAccuracy != 0 {
      try visitor.visitSingularDoubleField(value: self.verticalAccuracy, fieldNumber: 4)
    }
    if self.altitude != 0 {
      try visitor.visitSingularDoubleField(value: self.altitude, fieldNumber: 5)
    }
    if self.course != 0 {
      try visitor.visitSingularDoubleField(value: self.course, fieldNumber: 6)
    }
    if self.speed != 0 {
      try visitor.visitSingularDoubleField(value: self.speed, fieldNumber: 7)
    }
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DistributedMatchEngine_Loc, rhs: DistributedMatchEngine_Loc) -> Bool {
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.horizontalAccuracy != rhs.horizontalAccuracy {return false}
    if lhs.verticalAccuracy != rhs.verticalAccuracy {return false}
    if lhs.altitude != rhs.altitude {return false}
    if lhs.course != rhs.course {return false}
    if lhs.speed != rhs.speed {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DistributedMatchEngine_Sample: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Sample"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "timestamp"),
    100: .same(proto: "tags"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 100: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.tags) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.value != 0 {
      try visitor.visitSingularDoubleField(value: self.value, fieldNumber: 1)
    }
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.tags.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.tags, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DistributedMatchEngine_Sample, rhs: DistributedMatchEngine_Sample) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DistributedMatchEngine_Statistics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Statistics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "avg"),
    2: .same(proto: "min"),
    3: .same(proto: "max"),
    4: .standard(proto: "std_dev"),
    5: .same(proto: "variance"),
    6: .standard(proto: "num_samples"),
    7: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.avg) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.min) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.max) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.stdDev) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.variance) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.numSamples) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.avg != 0 {
      try visitor.visitSingularDoubleField(value: self.avg, fieldNumber: 1)
    }
    if self.min != 0 {
      try visitor.visitSingularDoubleField(value: self.min, fieldNumber: 2)
    }
    if self.max != 0 {
      try visitor.visitSingularDoubleField(value: self.max, fieldNumber: 3)
    }
    if self.stdDev != 0 {
      try visitor.visitSingularDoubleField(value: self.stdDev, fieldNumber: 4)
    }
    if self.variance != 0 {
      try visitor.visitSingularDoubleField(value: self.variance, fieldNumber: 5)
    }
    if self.numSamples != 0 {
      try visitor.visitSingularUInt64Field(value: self.numSamples, fieldNumber: 6)
    }
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DistributedMatchEngine_Statistics, rhs: DistributedMatchEngine_Statistics) -> Bool {
    if lhs.avg != rhs.avg {return false}
    if lhs.min != rhs.min {return false}
    if lhs.max != rhs.max {return false}
    if lhs.stdDev != rhs.stdDev {return false}
    if lhs.variance != rhs.variance {return false}
    if lhs.numSamples != rhs.numSamples {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
